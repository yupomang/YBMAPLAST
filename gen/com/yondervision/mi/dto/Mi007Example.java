package com.yondervision.mi.dto;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Mi007Example {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public Mi007Example() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    protected Mi007Example(Mi007Example example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table MI007
     *
     * @abatorgenerated Fri Sep 27 20:46:09 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andCenteridIsNull() {
            addCriterion("CENTERID is null");
            return this;
        }

        public Criteria andCenteridIsNotNull() {
            addCriterion("CENTERID is not null");
            return this;
        }

        public Criteria andCenteridEqualTo(String value) {
            addCriterion("CENTERID =", value, "centerid");
            return this;
        }

        public Criteria andCenteridNotEqualTo(String value) {
            addCriterion("CENTERID <>", value, "centerid");
            return this;
        }

        public Criteria andCenteridGreaterThan(String value) {
            addCriterion("CENTERID >", value, "centerid");
            return this;
        }

        public Criteria andCenteridGreaterThanOrEqualTo(String value) {
            addCriterion("CENTERID >=", value, "centerid");
            return this;
        }

        public Criteria andCenteridLessThan(String value) {
            addCriterion("CENTERID <", value, "centerid");
            return this;
        }

        public Criteria andCenteridLessThanOrEqualTo(String value) {
            addCriterion("CENTERID <=", value, "centerid");
            return this;
        }

        public Criteria andCenteridLike(String value) {
            addCriterion("CENTERID like", value, "centerid");
            return this;
        }

        public Criteria andCenteridNotLike(String value) {
            addCriterion("CENTERID not like", value, "centerid");
            return this;
        }

        public Criteria andCenteridIn(List values) {
            addCriterion("CENTERID in", values, "centerid");
            return this;
        }

        public Criteria andCenteridNotIn(List values) {
            addCriterion("CENTERID not in", values, "centerid");
            return this;
        }

        public Criteria andCenteridBetween(String value1, String value2) {
            addCriterion("CENTERID between", value1, value2, "centerid");
            return this;
        }

        public Criteria andCenteridNotBetween(String value1, String value2) {
            addCriterion("CENTERID not between", value1, value2, "centerid");
            return this;
        }

        public Criteria andDicidIsNull() {
            addCriterion("DICID is null");
            return this;
        }

        public Criteria andDicidIsNotNull() {
            addCriterion("DICID is not null");
            return this;
        }

        public Criteria andDicidEqualTo(Integer value) {
            addCriterion("DICID =", value, "dicid");
            return this;
        }

        public Criteria andDicidNotEqualTo(Integer value) {
            addCriterion("DICID <>", value, "dicid");
            return this;
        }

        public Criteria andDicidGreaterThan(Integer value) {
            addCriterion("DICID >", value, "dicid");
            return this;
        }

        public Criteria andDicidGreaterThanOrEqualTo(Integer value) {
            addCriterion("DICID >=", value, "dicid");
            return this;
        }

        public Criteria andDicidLessThan(Integer value) {
            addCriterion("DICID <", value, "dicid");
            return this;
        }

        public Criteria andDicidLessThanOrEqualTo(Integer value) {
            addCriterion("DICID <=", value, "dicid");
            return this;
        }

        public Criteria andDicidIn(List values) {
            addCriterion("DICID in", values, "dicid");
            return this;
        }

        public Criteria andDicidNotIn(List values) {
            addCriterion("DICID not in", values, "dicid");
            return this;
        }

        public Criteria andDicidBetween(Integer value1, Integer value2) {
            addCriterion("DICID between", value1, value2, "dicid");
            return this;
        }

        public Criteria andDicidNotBetween(Integer value1, Integer value2) {
            addCriterion("DICID not between", value1, value2, "dicid");
            return this;
        }

        public Criteria andItemidIsNull() {
            addCriterion("ITEMID is null");
            return this;
        }

        public Criteria andItemidIsNotNull() {
            addCriterion("ITEMID is not null");
            return this;
        }

        public Criteria andItemidEqualTo(String value) {
            addCriterion("ITEMID =", value, "itemid");
            return this;
        }

        public Criteria andItemidNotEqualTo(String value) {
            addCriterion("ITEMID <>", value, "itemid");
            return this;
        }

        public Criteria andItemidGreaterThan(String value) {
            addCriterion("ITEMID >", value, "itemid");
            return this;
        }

        public Criteria andItemidGreaterThanOrEqualTo(String value) {
            addCriterion("ITEMID >=", value, "itemid");
            return this;
        }

        public Criteria andItemidLessThan(String value) {
            addCriterion("ITEMID <", value, "itemid");
            return this;
        }

        public Criteria andItemidLessThanOrEqualTo(String value) {
            addCriterion("ITEMID <=", value, "itemid");
            return this;
        }

        public Criteria andItemidLike(String value) {
            addCriterion("ITEMID like", value, "itemid");
            return this;
        }

        public Criteria andItemidNotLike(String value) {
            addCriterion("ITEMID not like", value, "itemid");
            return this;
        }

        public Criteria andItemidIn(List values) {
            addCriterion("ITEMID in", values, "itemid");
            return this;
        }

        public Criteria andItemidNotIn(List values) {
            addCriterion("ITEMID not in", values, "itemid");
            return this;
        }

        public Criteria andItemidBetween(String value1, String value2) {
            addCriterion("ITEMID between", value1, value2, "itemid");
            return this;
        }

        public Criteria andItemidNotBetween(String value1, String value2) {
            addCriterion("ITEMID not between", value1, value2, "itemid");
            return this;
        }

        public Criteria andItemvalIsNull() {
            addCriterion("ITEMVAL is null");
            return this;
        }

        public Criteria andItemvalIsNotNull() {
            addCriterion("ITEMVAL is not null");
            return this;
        }

        public Criteria andItemvalEqualTo(String value) {
            addCriterion("ITEMVAL =", value, "itemval");
            return this;
        }

        public Criteria andItemvalNotEqualTo(String value) {
            addCriterion("ITEMVAL <>", value, "itemval");
            return this;
        }

        public Criteria andItemvalGreaterThan(String value) {
            addCriterion("ITEMVAL >", value, "itemval");
            return this;
        }

        public Criteria andItemvalGreaterThanOrEqualTo(String value) {
            addCriterion("ITEMVAL >=", value, "itemval");
            return this;
        }

        public Criteria andItemvalLessThan(String value) {
            addCriterion("ITEMVAL <", value, "itemval");
            return this;
        }

        public Criteria andItemvalLessThanOrEqualTo(String value) {
            addCriterion("ITEMVAL <=", value, "itemval");
            return this;
        }

        public Criteria andItemvalLike(String value) {
            addCriterion("ITEMVAL like", value, "itemval");
            return this;
        }

        public Criteria andItemvalNotLike(String value) {
            addCriterion("ITEMVAL not like", value, "itemval");
            return this;
        }

        public Criteria andItemvalIn(List values) {
            addCriterion("ITEMVAL in", values, "itemval");
            return this;
        }

        public Criteria andItemvalNotIn(List values) {
            addCriterion("ITEMVAL not in", values, "itemval");
            return this;
        }

        public Criteria andItemvalBetween(String value1, String value2) {
            addCriterion("ITEMVAL between", value1, value2, "itemval");
            return this;
        }

        public Criteria andItemvalNotBetween(String value1, String value2) {
            addCriterion("ITEMVAL not between", value1, value2, "itemval");
            return this;
        }

        public Criteria andUpdicidIsNull() {
            addCriterion("UPDICID is null");
            return this;
        }

        public Criteria andUpdicidIsNotNull() {
            addCriterion("UPDICID is not null");
            return this;
        }

        public Criteria andUpdicidEqualTo(Integer value) {
            addCriterion("UPDICID =", value, "updicid");
            return this;
        }

        public Criteria andUpdicidNotEqualTo(Integer value) {
            addCriterion("UPDICID <>", value, "updicid");
            return this;
        }

        public Criteria andUpdicidGreaterThan(Integer value) {
            addCriterion("UPDICID >", value, "updicid");
            return this;
        }

        public Criteria andUpdicidGreaterThanOrEqualTo(Integer value) {
            addCriterion("UPDICID >=", value, "updicid");
            return this;
        }

        public Criteria andUpdicidLessThan(Integer value) {
            addCriterion("UPDICID <", value, "updicid");
            return this;
        }

        public Criteria andUpdicidLessThanOrEqualTo(Integer value) {
            addCriterion("UPDICID <=", value, "updicid");
            return this;
        }

        public Criteria andUpdicidIn(List values) {
            addCriterion("UPDICID in", values, "updicid");
            return this;
        }

        public Criteria andUpdicidNotIn(List values) {
            addCriterion("UPDICID not in", values, "updicid");
            return this;
        }

        public Criteria andUpdicidBetween(Integer value1, Integer value2) {
            addCriterion("UPDICID between", value1, value2, "updicid");
            return this;
        }

        public Criteria andUpdicidNotBetween(Integer value1, Integer value2) {
            addCriterion("UPDICID not between", value1, value2, "updicid");
            return this;
        }
    }
}