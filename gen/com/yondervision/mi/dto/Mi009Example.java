package com.yondervision.mi.dto;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Mi009Example {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public Mi009Example() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	protected Mi009Example(Mi009Example example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table MI009
	 * @abatorgenerated  Tue Oct 15 09:07:16 CST 2013
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andLogcodeIsNull() {
			addCriterion("LOGCODE is null");
			return this;
		}

		public Criteria andLogcodeIsNotNull() {
			addCriterion("LOGCODE is not null");
			return this;
		}

		public Criteria andLogcodeEqualTo(String value) {
			addCriterion("LOGCODE =", value, "logcode");
			return this;
		}

		public Criteria andLogcodeNotEqualTo(String value) {
			addCriterion("LOGCODE <>", value, "logcode");
			return this;
		}

		public Criteria andLogcodeGreaterThan(String value) {
			addCriterion("LOGCODE >", value, "logcode");
			return this;
		}

		public Criteria andLogcodeGreaterThanOrEqualTo(String value) {
			addCriterion("LOGCODE >=", value, "logcode");
			return this;
		}

		public Criteria andLogcodeLessThan(String value) {
			addCriterion("LOGCODE <", value, "logcode");
			return this;
		}

		public Criteria andLogcodeLessThanOrEqualTo(String value) {
			addCriterion("LOGCODE <=", value, "logcode");
			return this;
		}

		public Criteria andLogcodeLike(String value) {
			addCriterion("LOGCODE like", value, "logcode");
			return this;
		}

		public Criteria andLogcodeNotLike(String value) {
			addCriterion("LOGCODE not like", value, "logcode");
			return this;
		}

		public Criteria andLogcodeIn(List values) {
			addCriterion("LOGCODE in", values, "logcode");
			return this;
		}

		public Criteria andLogcodeNotIn(List values) {
			addCriterion("LOGCODE not in", values, "logcode");
			return this;
		}

		public Criteria andLogcodeBetween(String value1, String value2) {
			addCriterion("LOGCODE between", value1, value2, "logcode");
			return this;
		}

		public Criteria andLogcodeNotBetween(String value1, String value2) {
			addCriterion("LOGCODE not between", value1, value2, "logcode");
			return this;
		}

		public Criteria andLogtextIsNull() {
			addCriterion("LOGTEXT is null");
			return this;
		}

		public Criteria andLogtextIsNotNull() {
			addCriterion("LOGTEXT is not null");
			return this;
		}

		public Criteria andLogtextEqualTo(String value) {
			addCriterion("LOGTEXT =", value, "logtext");
			return this;
		}

		public Criteria andLogtextNotEqualTo(String value) {
			addCriterion("LOGTEXT <>", value, "logtext");
			return this;
		}

		public Criteria andLogtextGreaterThan(String value) {
			addCriterion("LOGTEXT >", value, "logtext");
			return this;
		}

		public Criteria andLogtextGreaterThanOrEqualTo(String value) {
			addCriterion("LOGTEXT >=", value, "logtext");
			return this;
		}

		public Criteria andLogtextLessThan(String value) {
			addCriterion("LOGTEXT <", value, "logtext");
			return this;
		}

		public Criteria andLogtextLessThanOrEqualTo(String value) {
			addCriterion("LOGTEXT <=", value, "logtext");
			return this;
		}

		public Criteria andLogtextLike(String value) {
			addCriterion("LOGTEXT like", value, "logtext");
			return this;
		}

		public Criteria andLogtextNotLike(String value) {
			addCriterion("LOGTEXT not like", value, "logtext");
			return this;
		}

		public Criteria andLogtextIn(List values) {
			addCriterion("LOGTEXT in", values, "logtext");
			return this;
		}

		public Criteria andLogtextNotIn(List values) {
			addCriterion("LOGTEXT not in", values, "logtext");
			return this;
		}

		public Criteria andLogtextBetween(String value1, String value2) {
			addCriterion("LOGTEXT between", value1, value2, "logtext");
			return this;
		}

		public Criteria andLogtextNotBetween(String value1, String value2) {
			addCriterion("LOGTEXT not between", value1, value2, "logtext");
			return this;
		}

		public Criteria andModitimeIsNull() {
			addCriterion("MODITIME is null");
			return this;
		}

		public Criteria andModitimeIsNotNull() {
			addCriterion("MODITIME is not null");
			return this;
		}

		public Criteria andModitimeEqualTo(String value) {
			addCriterion("MODITIME =", value, "moditime");
			return this;
		}

		public Criteria andModitimeNotEqualTo(String value) {
			addCriterion("MODITIME <>", value, "moditime");
			return this;
		}

		public Criteria andModitimeGreaterThan(String value) {
			addCriterion("MODITIME >", value, "moditime");
			return this;
		}

		public Criteria andModitimeGreaterThanOrEqualTo(String value) {
			addCriterion("MODITIME >=", value, "moditime");
			return this;
		}

		public Criteria andModitimeLessThan(String value) {
			addCriterion("MODITIME <", value, "moditime");
			return this;
		}

		public Criteria andModitimeLessThanOrEqualTo(String value) {
			addCriterion("MODITIME <=", value, "moditime");
			return this;
		}

		public Criteria andModitimeLike(String value) {
			addCriterion("MODITIME like", value, "moditime");
			return this;
		}

		public Criteria andModitimeNotLike(String value) {
			addCriterion("MODITIME not like", value, "moditime");
			return this;
		}

		public Criteria andModitimeIn(List values) {
			addCriterion("MODITIME in", values, "moditime");
			return this;
		}

		public Criteria andModitimeNotIn(List values) {
			addCriterion("MODITIME not in", values, "moditime");
			return this;
		}

		public Criteria andModitimeBetween(String value1, String value2) {
			addCriterion("MODITIME between", value1, value2, "moditime");
			return this;
		}

		public Criteria andModitimeNotBetween(String value1, String value2) {
			addCriterion("MODITIME not between", value1, value2, "moditime");
			return this;
		}
	}
}