package com.yondervision.mi.dto;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Mi011Example {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public Mi011Example() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    protected Mi011Example(Mi011Example example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table MI011
     *
     * @abatorgenerated Fri Oct 04 11:32:19 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andCenteridIsNull() {
            addCriterion("CENTERID is null");
            return this;
        }

        public Criteria andCenteridIsNotNull() {
            addCriterion("CENTERID is not null");
            return this;
        }

        public Criteria andCenteridEqualTo(String value) {
            addCriterion("CENTERID =", value, "centerid");
            return this;
        }

        public Criteria andCenteridNotEqualTo(String value) {
            addCriterion("CENTERID <>", value, "centerid");
            return this;
        }

        public Criteria andCenteridGreaterThan(String value) {
            addCriterion("CENTERID >", value, "centerid");
            return this;
        }

        public Criteria andCenteridGreaterThanOrEqualTo(String value) {
            addCriterion("CENTERID >=", value, "centerid");
            return this;
        }

        public Criteria andCenteridLessThan(String value) {
            addCriterion("CENTERID <", value, "centerid");
            return this;
        }

        public Criteria andCenteridLessThanOrEqualTo(String value) {
            addCriterion("CENTERID <=", value, "centerid");
            return this;
        }

        public Criteria andCenteridLike(String value) {
            addCriterion("CENTERID like", value, "centerid");
            return this;
        }

        public Criteria andCenteridNotLike(String value) {
            addCriterion("CENTERID not like", value, "centerid");
            return this;
        }

        public Criteria andCenteridIn(List values) {
            addCriterion("CENTERID in", values, "centerid");
            return this;
        }

        public Criteria andCenteridNotIn(List values) {
            addCriterion("CENTERID not in", values, "centerid");
            return this;
        }

        public Criteria andCenteridBetween(String value1, String value2) {
            addCriterion("CENTERID between", value1, value2, "centerid");
            return this;
        }

        public Criteria andCenteridNotBetween(String value1, String value2) {
            addCriterion("CENTERID not between", value1, value2, "centerid");
            return this;
        }

        public Criteria andClassnameIsNull() {
            addCriterion("CLASSNAME is null");
            return this;
        }

        public Criteria andClassnameIsNotNull() {
            addCriterion("CLASSNAME is not null");
            return this;
        }

        public Criteria andClassnameEqualTo(String value) {
            addCriterion("CLASSNAME =", value, "classname");
            return this;
        }

        public Criteria andClassnameNotEqualTo(String value) {
            addCriterion("CLASSNAME <>", value, "classname");
            return this;
        }

        public Criteria andClassnameGreaterThan(String value) {
            addCriterion("CLASSNAME >", value, "classname");
            return this;
        }

        public Criteria andClassnameGreaterThanOrEqualTo(String value) {
            addCriterion("CLASSNAME >=", value, "classname");
            return this;
        }

        public Criteria andClassnameLessThan(String value) {
            addCriterion("CLASSNAME <", value, "classname");
            return this;
        }

        public Criteria andClassnameLessThanOrEqualTo(String value) {
            addCriterion("CLASSNAME <=", value, "classname");
            return this;
        }

        public Criteria andClassnameLike(String value) {
            addCriterion("CLASSNAME like", value, "classname");
            return this;
        }

        public Criteria andClassnameNotLike(String value) {
            addCriterion("CLASSNAME not like", value, "classname");
            return this;
        }

        public Criteria andClassnameIn(List values) {
            addCriterion("CLASSNAME in", values, "classname");
            return this;
        }

        public Criteria andClassnameNotIn(List values) {
            addCriterion("CLASSNAME not in", values, "classname");
            return this;
        }

        public Criteria andClassnameBetween(String value1, String value2) {
            addCriterion("CLASSNAME between", value1, value2, "classname");
            return this;
        }

        public Criteria andClassnameNotBetween(String value1, String value2) {
            addCriterion("CLASSNAME not between", value1, value2, "classname");
            return this;
        }

        public Criteria andUrlIsNull() {
            addCriterion("URL is null");
            return this;
        }

        public Criteria andUrlIsNotNull() {
            addCriterion("URL is not null");
            return this;
        }

        public Criteria andUrlEqualTo(String value) {
            addCriterion("URL =", value, "url");
            return this;
        }

        public Criteria andUrlNotEqualTo(String value) {
            addCriterion("URL <>", value, "url");
            return this;
        }

        public Criteria andUrlGreaterThan(String value) {
            addCriterion("URL >", value, "url");
            return this;
        }

        public Criteria andUrlGreaterThanOrEqualTo(String value) {
            addCriterion("URL >=", value, "url");
            return this;
        }

        public Criteria andUrlLessThan(String value) {
            addCriterion("URL <", value, "url");
            return this;
        }

        public Criteria andUrlLessThanOrEqualTo(String value) {
            addCriterion("URL <=", value, "url");
            return this;
        }

        public Criteria andUrlLike(String value) {
            addCriterion("URL like", value, "url");
            return this;
        }

        public Criteria andUrlNotLike(String value) {
            addCriterion("URL not like", value, "url");
            return this;
        }

        public Criteria andUrlIn(List values) {
            addCriterion("URL in", values, "url");
            return this;
        }

        public Criteria andUrlNotIn(List values) {
            addCriterion("URL not in", values, "url");
            return this;
        }

        public Criteria andUrlBetween(String value1, String value2) {
            addCriterion("URL between", value1, value2, "url");
            return this;
        }

        public Criteria andUrlNotBetween(String value1, String value2) {
            addCriterion("URL not between", value1, value2, "url");
            return this;
        }
    }
}