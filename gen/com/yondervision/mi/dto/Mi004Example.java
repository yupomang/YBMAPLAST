package com.yondervision.mi.dto;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Mi004Example {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public Mi004Example() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	protected Mi004Example(Mi004Example example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table MI004
	 * @abatorgenerated  Fri Sep 27 20:46:09 CST 2013
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andLoginidIsNull() {
			addCriterion("LOGINID is null");
			return this;
		}

		public Criteria andLoginidIsNotNull() {
			addCriterion("LOGINID is not null");
			return this;
		}

		public Criteria andLoginidEqualTo(String value) {
			addCriterion("LOGINID =", value, "loginid");
			return this;
		}

		public Criteria andLoginidNotEqualTo(String value) {
			addCriterion("LOGINID <>", value, "loginid");
			return this;
		}

		public Criteria andLoginidGreaterThan(String value) {
			addCriterion("LOGINID >", value, "loginid");
			return this;
		}

		public Criteria andLoginidGreaterThanOrEqualTo(String value) {
			addCriterion("LOGINID >=", value, "loginid");
			return this;
		}

		public Criteria andLoginidLessThan(String value) {
			addCriterion("LOGINID <", value, "loginid");
			return this;
		}

		public Criteria andLoginidLessThanOrEqualTo(String value) {
			addCriterion("LOGINID <=", value, "loginid");
			return this;
		}

		public Criteria andLoginidLike(String value) {
			addCriterion("LOGINID like", value, "loginid");
			return this;
		}

		public Criteria andLoginidNotLike(String value) {
			addCriterion("LOGINID not like", value, "loginid");
			return this;
		}

		public Criteria andLoginidIn(List values) {
			addCriterion("LOGINID in", values, "loginid");
			return this;
		}

		public Criteria andLoginidNotIn(List values) {
			addCriterion("LOGINID not in", values, "loginid");
			return this;
		}

		public Criteria andLoginidBetween(String value1, String value2) {
			addCriterion("LOGINID between", value1, value2, "loginid");
			return this;
		}

		public Criteria andLoginidNotBetween(String value1, String value2) {
			addCriterion("LOGINID not between", value1, value2, "loginid");
			return this;
		}

		public Criteria andRoleidIsNull() {
			addCriterion("ROLEID is null");
			return this;
		}

		public Criteria andRoleidIsNotNull() {
			addCriterion("ROLEID is not null");
			return this;
		}

		public Criteria andRoleidEqualTo(String value) {
			addCriterion("ROLEID =", value, "roleid");
			return this;
		}

		public Criteria andRoleidNotEqualTo(String value) {
			addCriterion("ROLEID <>", value, "roleid");
			return this;
		}

		public Criteria andRoleidGreaterThan(String value) {
			addCriterion("ROLEID >", value, "roleid");
			return this;
		}

		public Criteria andRoleidGreaterThanOrEqualTo(String value) {
			addCriterion("ROLEID >=", value, "roleid");
			return this;
		}

		public Criteria andRoleidLessThan(String value) {
			addCriterion("ROLEID <", value, "roleid");
			return this;
		}

		public Criteria andRoleidLessThanOrEqualTo(String value) {
			addCriterion("ROLEID <=", value, "roleid");
			return this;
		}

		public Criteria andRoleidLike(String value) {
			addCriterion("ROLEID like", value, "roleid");
			return this;
		}

		public Criteria andRoleidNotLike(String value) {
			addCriterion("ROLEID not like", value, "roleid");
			return this;
		}

		public Criteria andRoleidIn(List values) {
			addCriterion("ROLEID in", values, "roleid");
			return this;
		}

		public Criteria andRoleidNotIn(List values) {
			addCriterion("ROLEID not in", values, "roleid");
			return this;
		}

		public Criteria andRoleidBetween(String value1, String value2) {
			addCriterion("ROLEID between", value1, value2, "roleid");
			return this;
		}

		public Criteria andRoleidNotBetween(String value1, String value2) {
			addCriterion("ROLEID not between", value1, value2, "roleid");
			return this;
		}
	}
}