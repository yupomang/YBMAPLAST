package com.yondervision.mi.dto;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Mi010Example {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public Mi010Example() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    protected Mi010Example(Mi010Example example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table MI010
     *
     * @abatorgenerated Tue Oct 08 17:04:01 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andErrcodeIsNull() {
            addCriterion("ERRCODE is null");
            return this;
        }

        public Criteria andErrcodeIsNotNull() {
            addCriterion("ERRCODE is not null");
            return this;
        }

        public Criteria andErrcodeEqualTo(String value) {
            addCriterion("ERRCODE =", value, "errcode");
            return this;
        }

        public Criteria andErrcodeNotEqualTo(String value) {
            addCriterion("ERRCODE <>", value, "errcode");
            return this;
        }

        public Criteria andErrcodeGreaterThan(String value) {
            addCriterion("ERRCODE >", value, "errcode");
            return this;
        }

        public Criteria andErrcodeGreaterThanOrEqualTo(String value) {
            addCriterion("ERRCODE >=", value, "errcode");
            return this;
        }

        public Criteria andErrcodeLessThan(String value) {
            addCriterion("ERRCODE <", value, "errcode");
            return this;
        }

        public Criteria andErrcodeLessThanOrEqualTo(String value) {
            addCriterion("ERRCODE <=", value, "errcode");
            return this;
        }

        public Criteria andErrcodeLike(String value) {
            addCriterion("ERRCODE like", value, "errcode");
            return this;
        }

        public Criteria andErrcodeNotLike(String value) {
            addCriterion("ERRCODE not like", value, "errcode");
            return this;
        }

        public Criteria andErrcodeIn(List values) {
            addCriterion("ERRCODE in", values, "errcode");
            return this;
        }

        public Criteria andErrcodeNotIn(List values) {
            addCriterion("ERRCODE not in", values, "errcode");
            return this;
        }

        public Criteria andErrcodeBetween(String value1, String value2) {
            addCriterion("ERRCODE between", value1, value2, "errcode");
            return this;
        }

        public Criteria andErrcodeNotBetween(String value1, String value2) {
            addCriterion("ERRCODE not between", value1, value2, "errcode");
            return this;
        }

        public Criteria andErrtextIsNull() {
            addCriterion("ERRTEXT is null");
            return this;
        }

        public Criteria andErrtextIsNotNull() {
            addCriterion("ERRTEXT is not null");
            return this;
        }

        public Criteria andErrtextEqualTo(String value) {
            addCriterion("ERRTEXT =", value, "errtext");
            return this;
        }

        public Criteria andErrtextNotEqualTo(String value) {
            addCriterion("ERRTEXT <>", value, "errtext");
            return this;
        }

        public Criteria andErrtextGreaterThan(String value) {
            addCriterion("ERRTEXT >", value, "errtext");
            return this;
        }

        public Criteria andErrtextGreaterThanOrEqualTo(String value) {
            addCriterion("ERRTEXT >=", value, "errtext");
            return this;
        }

        public Criteria andErrtextLessThan(String value) {
            addCriterion("ERRTEXT <", value, "errtext");
            return this;
        }

        public Criteria andErrtextLessThanOrEqualTo(String value) {
            addCriterion("ERRTEXT <=", value, "errtext");
            return this;
        }

        public Criteria andErrtextLike(String value) {
            addCriterion("ERRTEXT like", value, "errtext");
            return this;
        }

        public Criteria andErrtextNotLike(String value) {
            addCriterion("ERRTEXT not like", value, "errtext");
            return this;
        }

        public Criteria andErrtextIn(List values) {
            addCriterion("ERRTEXT in", values, "errtext");
            return this;
        }

        public Criteria andErrtextNotIn(List values) {
            addCriterion("ERRTEXT not in", values, "errtext");
            return this;
        }

        public Criteria andErrtextBetween(String value1, String value2) {
            addCriterion("ERRTEXT between", value1, value2, "errtext");
            return this;
        }

        public Criteria andErrtextNotBetween(String value1, String value2) {
            addCriterion("ERRTEXT not between", value1, value2, "errtext");
            return this;
        }

        public Criteria andModitimeIsNull() {
            addCriterion("MODITIME is null");
            return this;
        }

        public Criteria andModitimeIsNotNull() {
            addCriterion("MODITIME is not null");
            return this;
        }

        public Criteria andModitimeEqualTo(String value) {
            addCriterion("MODITIME =", value, "moditime");
            return this;
        }

        public Criteria andModitimeNotEqualTo(String value) {
            addCriterion("MODITIME <>", value, "moditime");
            return this;
        }

        public Criteria andModitimeGreaterThan(String value) {
            addCriterion("MODITIME >", value, "moditime");
            return this;
        }

        public Criteria andModitimeGreaterThanOrEqualTo(String value) {
            addCriterion("MODITIME >=", value, "moditime");
            return this;
        }

        public Criteria andModitimeLessThan(String value) {
            addCriterion("MODITIME <", value, "moditime");
            return this;
        }

        public Criteria andModitimeLessThanOrEqualTo(String value) {
            addCriterion("MODITIME <=", value, "moditime");
            return this;
        }

        public Criteria andModitimeLike(String value) {
            addCriterion("MODITIME like", value, "moditime");
            return this;
        }

        public Criteria andModitimeNotLike(String value) {
            addCriterion("MODITIME not like", value, "moditime");
            return this;
        }

        public Criteria andModitimeIn(List values) {
            addCriterion("MODITIME in", values, "moditime");
            return this;
        }

        public Criteria andModitimeNotIn(List values) {
            addCriterion("MODITIME not in", values, "moditime");
            return this;
        }

        public Criteria andModitimeBetween(String value1, String value2) {
            addCriterion("MODITIME between", value1, value2, "moditime");
            return this;
        }

        public Criteria andModitimeNotBetween(String value1, String value2) {
            addCriterion("MODITIME not between", value1, value2, "moditime");
            return this;
        }
    }
}